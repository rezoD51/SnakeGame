Oyunun Temel Bileşenleri
1. Değişkenler ve Sabitler

const canvas = document.getElementById('game-board');
const ctx = canvas.getContext('2d');
const gridSize = 20;
const tileCount = canvas.width / gridSize;

// Oyun durumu değişkenleri
let snake = []; // Yılanın segmentlerini tutar
let food = []; // Yenilebilir meyveler
let walls = []; // Engeller
let keys = []; // Anahtarlar
let locks = []; // Kilitler
let specialItems = []; // Özel güçlendirmeler
let xVelocity = 0, yVelocity = 0; // Yılanın hareket yönü
let score = 0, room = 1, gameTime = 0; // Oyun istatistikleri
let gameRunning = true, gameSpeed = 100; // Oyun kontrol değişkenleri
let powerup = null, powerupStartTime = 0; // Güçlendirme bilgileri
let mission = '', missionType = '', missionProgress = 0, missionTarget = 0; // Görev bilgileri

2. Renk Paleti

const colors = {
    snake: '#2ecc71',
    snakeHead: '#27ae60',
    food: '#e74c3c',
    wall: '#2c3e50',
    breakableWall: '#34495e',
    key: '#f39c12',
    lock: '#9b59b6',
    special: '#1abc9c',
    background: '#111',
    grid: '#1a1a1a'
};

Temel Fonksiyonlar

1. Oyun Başlatma ve Yönetim

function initGame() {
    // Oyun durumunu sıfırlar
    snake = [{x: 20, y: 20}];
    xVelocity = yVelocity = 0;
    score = 0; room = 1;
    gameRunning = true;
    
    generateRoom(); // İlk oda oluşturulur
    startGameLoop(); // Oyun döngüsü başlatılır
    updateDisplays(); // UI güncellenir
}

function startGameLoop() {
    clearInterval(gameInterval);
    gameInterval = setInterval(gameLoop, gameSpeed);
}

function gameLoop() {
    if (gameRunning && !isWaitingForInput) {
        clearBoard();
        moveSnake();
        checkCollisions();
        checkMission();
        updatePowerup();
        drawGame();
        updateTime();
    }
}
2. Oda ve Görev Yönetimi

function generateRoom() {
    // Oda içeriğini oluşturur
    generateWalls();
    setRandomMission();
    
    // Özel güçlendirme ekleme (%30 şans)
    if (Math.random() < 0.3) {
        specialItems.push({
            x: Math.floor(Math.random() * tileCount),
            y: Math.floor(Math.random() * tileCount),
            type: 'luckyCookie'
        });
    }
    
    // Göreve göre meyve, anahtar veya kilit yerleştirir
    if (missionType === 'collectFruits' || missionType === 'collectSomeFruits') {
        const fruitCount = missionType === 'collectFruits' ? 8 + Math.floor(Math.random() * 7) : missionTarget;
        for (let i = 0; i < fruitCount; i++) {
            placeValidItem(food, 'food');
        }
    } else {
        placeValidItem(food, 'food');
    }
    
    if (missionType === 'unlockLocks') {
        const lockCount = 4 + Math.floor(Math.random() * 4);
        for (let i = 0; i < lockCount; i++) {
            placeValidItem(locks, 'lock');
            placeValidItem(keys, 'key');
        }
    }
}

function setRandomMission() {
    const missions = [
        { type: 'survive', target: 35, text: "35 saniye boyunca hayatta kal" },
        { type: 'collectFruits', target: 0, text: "Bütün meyveleri topla" },
        { type: 'unlockLocks', target: 0, text: "Anahtarları yerleştirip bütün kilitleri aç" },
        { type: 'collectSomeFruits', target: 6, text: "6 meyve topla" }
    ];
    
    const selected = missions[Math.floor(Math.random() * missions.length)];
    missionType = selected.type;
    missionTarget = selected.target;
    mission = selected.text;
    missionProgress = 0;
    
    missionDisplay.innerHTML = `Görev: <span class="mission-critical">${mission}</span>`;
}

3. Yılan Hareketi ve Çarpışma Kontrolleri

function moveSnake() {
    const head = {
        x: (snake[0].x + xVelocity + tileCount) % tileCount,
        y: (snake[0].y + yVelocity + tileCount) % tileCount
    };
    
    snake.unshift(head);
    
    if (!checkFoodCollision(head) && !checkSpecialItemCollision(head)) {
        snake.pop();
    }
}

function checkCollisions() {
    const head = snake[0];
    
    // Duvar çarpışması kontrolü
    const wallCollision = walls.some(wall => {
        if (wall.x === head.x && wall.y === head.y) {
            if (wall.breakable) {
                walls = walls.filter(w => !(w.x === wall.x && w.y === wall.y));
                score += 5;
                return false;
            }
            return true;
        }
        return false;
    });

    if (wallCollision) {
        endGame();
        return;
    }

    // Kendine çarpma kontrolü
    for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
            endGame();
            return;
        }
    }
    
    checkKeyCollision(head);
    checkLockCollision(head);
}

4. Güçlendirme Sistemi

function activateRandomPowerup() {
    const powerups = [
        { 
            name: "Hız Artışı", 
            type: "speedUp", 
            duration: 10000, // 10 saniye
            effect: () => { 
                gameSpeed = 50; 
                startGameLoop(); 
            } 
        },
        { 
            name: "Hız Azalışı", 
            type: "speedDown", 
            duration: 10000,
            effect: () => { 
                gameSpeed = 150; 
                startGameLoop(); 
            } 
        },
        { 
            name: "Çift Puan", 
            type: "doubleScore", 
            duration: 15000 
        },
        { 
            name: "Duvar Geçme", 
            type: "wallPass", 
            duration: 8000 
        }
    ];
    
    powerup = powerups[Math.floor(Math.random() * powerups.length)];
    powerupStartTime = Date.now();
    powerup.effect();
    updatePowerupDisplay();
}

5. Çizim Fonksiyonları

function drawGame() {
    // Duvarları çiz
    walls.forEach(wall => {
        if(wall.breakable) {
            // Kırılabilir duvar çizimi
        } else {
            // Normal duvar çizimi
        }
    });
    
    // Meyveleri çiz
    food.forEach(item => {
        // Daire şeklinde meyve çizimi
    });
    
    // Yılanı çiz
    snake.forEach((segment, index) => {
        if (index === 0) {
            // Baş kısmı (gözlerle birlikte)
        } else {
            // Vücut segmentleri
        }
    });
    
    // Diğer öğeleri çiz (anahtarlar, kilitler, özel güçlendirmeler)
}
